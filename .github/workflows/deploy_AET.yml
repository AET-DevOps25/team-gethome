name: Deploy GetHome Application

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'helm/**'
      - 'server/**'
      - 'client/**'
      - '.github/workflows/deploy_AET.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'helm/**'
      - 'server/**'
      - 'client/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production
      namespace:
        description: 'Kubernetes namespace'
        required: false
        default: 'devops25-k8s-gethome'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: aet-devops25/team-gethome

jobs:
  # Test and Build Services
  test-and-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, usermanagement-service, message-service, routing-service, ai-service, gethome-metrics-exporter, react-client]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17 (for Java services)
      if: contains(matrix.service, 'service') && matrix.service != 'ai-service' && matrix.service != 'react-client'
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js (for React client)
      if: matrix.service == 'react-client'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Set up Python (for AI service)
      if: matrix.service == 'ai-service'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Python (for metrics exporter)
      if: matrix.service == 'gethome-metrics-exporter'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Test Java services
    - name: Test Java services
      if: contains(matrix.service, 'service') && matrix.service != 'ai-service' && matrix.service != 'gethome-metrics-exporter' && matrix.service != 'react-client'
      run: |
        cd server/${{ matrix.service }}
        chmod +x ./gradlew
        ./gradlew test

    # Test React client
    - name: Test React client
      if: matrix.service == 'react-client'
      run: |
        cd client
        npm ci
        npm test

    # Test AI service
    - name: Test AI service
      if: matrix.service == 'ai-service'
      run: |
        cd server/ai-service
        pip install -r requirements.txt
        python -m pytest tests/ -v

    # Test metrics exporter
    - name: Test metrics exporter
      if: matrix.service == 'gethome-metrics-exporter'
      run: |
        cd server/gethome-metrics-exporter
        pip install -r requirements.txt
        # Basic syntax check since no tests exist yet
        python -m py_compile app/main.py
        echo "‚úÖ Metrics exporter code validation passed"

    # Build and push Docker images
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Login to Container Registry (fresh token)
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service == 'react-client' && './client' || format('./server/{0}', matrix.service) }}
        file: ${{ matrix.service == 'react-client' && './client/Dockerfile' || format('./server/{0}/Dockerfile', matrix.service) }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

  # Deploy to Development
  # deploy-development:
  #   if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
  #   runs-on: ubuntu-latest
  #   environment: development
  #   needs: test-and-build
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'latest'

  #   - name: Configure kubectl for development cluster
  #     run: |
  #       # Configure kubectl for your development cluster
  #       # Replace with your actual cluster configuration
  #       echo "${{ secrets.DEV_KUBECONFIG }}" | base64 -d > kubeconfig
  #       export KUBECONFIG=kubeconfig
        
  #       # Test connectivity with limited permissions
  #       echo "üîó Testing Kubernetes connectivity..."
  #       kubectl version --client
        
  #       # Test namespace access (this should work with limited permissions)
  #       echo "üìÅ Testing namespace access..."
  #       kubectl get namespaces devops25-k8s-gethome --ignore-not-found || echo "Namespace devops25-k8s-gethome does not exist yet (will be created)"
        
  #       # Test general connectivity without requiring cluster-admin
  #       echo "üéØ Testing basic API access..."
  #       kubectl auth can-i create pods --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited pod permissions"
  #       kubectl auth can-i create secrets --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited secret permissions"
        
  #       echo "‚úÖ Kubernetes connection established with available permissions"

  #   - name: Install Helm
  #     uses: azure/setup-helm@v3
  #     with:
  #       version: 'latest'

  #   - name: Add Helm repositories
  #     run: |
  #       helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  #       helm repo add grafana https://grafana.github.io/helm-charts
  #       helm repo update

  #   - name: Create namespace
  #     run: |
  #       export KUBECONFIG=kubeconfig
  #       kubectl create namespace devops25-k8s-gethome --dry-run=client -o yaml | kubectl apply -f -

  #   - name: Create GitHub Container Registry secret
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Create imagePullSecret for GitHub Container Registry
  #       kubectl create secret docker-registry ghcr-secret \
  #         --docker-server=ghcr.io \
  #         --docker-username=${{ github.actor }} \
  #         --docker-password=${{ secrets.GITHUB_TOKEN }} \
  #         --docker-email=${{ github.actor }}@users.noreply.github.com \
  #         --namespace devops25-k8s-gethome \
  #         --dry-run=client -o yaml | kubectl apply -f -
        
  #       echo "‚úÖ GitHub Container Registry secret created successfully"

  #   - name: Create application secrets
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Create secrets with actual credentials from GitHub secrets
  #       kubectl create secret generic gethome-secrets \
  #         --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
  #         --from-literal=mongo-root-password="${{ secrets.MONGO_ROOT_PASSWORD }}" \
  #         --from-literal=email-username="${{ secrets.EMAIL_USERNAME }}" \
  #         --from-literal=email-password="${{ secrets.EMAIL_PASSWORD }}" \
  #         --from-literal=twilio-account-sid="${{ secrets.TWILIO_ACCOUNT_SID }}" \
  #         --from-literal=twilio-auth-token="${{ secrets.TWILIO_AUTH_TOKEN }}" \
  #         --from-literal=twilio-phone-number="${{ secrets.TWILIO_PHONE_NUMBER }}" \
  #         --from-literal=openai-api-key="${{ secrets.OPENAI_API_KEY }}" \
  #         --from-literal=openroute-api-key="${{ secrets.OPENROUTE_API_KEY }}" \
  #         --namespace devops25-k8s-gethome \
  #         --dry-run=client -o yaml | kubectl apply -f -
        
  #       echo "‚úÖ Application secrets created successfully"

  #   - name: Deploy to development
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Deploy the application
  #       helm upgrade --install gethome-app ./helm/gethome-app \
  #         --namespace devops25-k8s-gethome \
  #         --create-namespace \
  #         -f ./helm/gethome-app/values-dev.yaml \
  #         --set global.environment=development \
  #         --set global.imageRegistry=ghcr.io \
  #         --set global.imagePullSecrets[0].name=ghcr-secret \
  #         --set secrets.enabled=false \
  #         --set monitoring.deploymentTracker.enabled=false \
  #         --wait --timeout=10m

  #   - name: Verify deployment
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Wait for all pods to be ready
  #       kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=gethome-app \
  #         --namespace devops25-k8s-gethome --timeout=300s
        
  #       # Check service status
  #       kubectl get services -n devops25-k8s-gethome
  #       kubectl get pods -n devops25-k8s-gethome

  #   - name: Run smoke tests
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Basic health checks
  #       kubectl get endpoints -n devops25-k8s-gethome
        
  #       # Check if services are responding
  #       # Add your specific health check endpoints here
  #       echo "Development deployment completed successfully"

  # # Deploy to Staging
  # deploy-staging:
  #   if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
  #   runs-on: ubuntu-latest
  #   environment: staging
  #   needs: test-and-build
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up kubectl
  #     uses: azure/setup-kubectl@v3
  #     with:
  #       version: 'latest'

  #   - name: Configure kubectl for staging cluster
  #     run: |
  #       echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
  #       export KUBECONFIG=kubeconfig
        
  #       # Test connectivity with limited permissions
  #       echo "üîó Testing Kubernetes connectivity..."
  #       kubectl version --client
        
  #       # Test namespace access
  #       echo "üìÅ Testing namespace access..."
  #       kubectl get namespaces devops25-k8s-gethome --ignore-not-found || echo "Namespace devops25-k8s-gethome does not exist yet (will be created)"
        
  #       # Test basic API access
  #       echo "üéØ Testing basic API access..."
  #       kubectl auth can-i create pods --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited pod permissions"
  #       kubectl auth can-i create secrets --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited secret permissions"
        
  #       echo "‚úÖ Kubernetes connection established with available permissions"

  #   - name: Install Helm
  #     uses: azure/setup-helm@v3
  #     with:
  #       version: 'latest'

  #   - name: Add Helm repositories
  #     run: |
  #       helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  #       helm repo add grafana https://grafana.github.io/helm-charts
  #       helm repo update

  #   - name: Create namespace
  #     run: |
  #       export KUBECONFIG=kubeconfig
  #       kubectl create namespace devops25-k8s-gethome --dry-run=client -o yaml | kubectl apply -f -

  #   - name: Create GitHub Container Registry secret
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Create imagePullSecret for GitHub Container Registry
  #       kubectl create secret docker-registry ghcr-secret \
  #         --docker-server=ghcr.io \
  #         --docker-username=${{ github.actor }} \
  #         --docker-password=${{ secrets.GITHUB_TOKEN }} \
  #         --docker-email=${{ github.actor }}@users.noreply.github.com \
  #         --namespace devops25-k8s-gethome \
  #         --dry-run=client -o yaml | kubectl apply -f -
        
  #       echo "‚úÖ GitHub Container Registry secret created successfully"

  #   - name: Create application secrets
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Create secrets with actual credentials from GitHub secrets
  #       kubectl create secret generic gethome-secrets \
  #         --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
  #         --from-literal=mongo-root-password="${{ secrets.MONGO_ROOT_PASSWORD }}" \
  #         --from-literal=email-username="${{ secrets.EMAIL_USERNAME }}" \
  #         --from-literal=email-password="${{ secrets.EMAIL_PASSWORD }}" \
  #         --from-literal=twilio-account-sid="${{ secrets.TWILIO_ACCOUNT_SID }}" \
  #         --from-literal=twilio-auth-token="${{ secrets.TWILIO_AUTH_TOKEN }}" \
  #         --from-literal=twilio-phone-number="${{ secrets.TWILIO_PHONE_NUMBER }}" \
  #         --from-literal=openai-api-key="${{ secrets.OPENAI_API_KEY }}" \
  #         --from-literal=openroute-api-key="${{ secrets.OPENROUTE_API_KEY }}" \
  #         --namespace devops25-k8s-gethome \
  #         --dry-run=client -o yaml | kubectl apply -f -
        
  #       echo "‚úÖ Application secrets created successfully"

  #   - name: Deploy to staging
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       helm upgrade --install gethome-app ./helm/gethome-app \
  #         --namespace devops25-k8s-gethome \
  #         --create-namespace \
  #         -f ./helm/gethome-app/values.yaml \
  #         --set global.environment=staging \
  #         --set global.imageRegistry=ghcr.io \
  #         --set global.imagePullSecrets[0].name=ghcr-secret \
  #         --set services.auth-service.image=ghcr.io/${{ env.IMAGE_NAME }}/auth-service:main \
  #         --set services.usermanagement-service.image=ghcr.io/${{ env.IMAGE_NAME }}/usermanagement-service:main \
  #         --set services.ai-service.image=ghcr.io/${{ env.IMAGE_NAME }}/ai-service:main \
  #         --set services.message-service.image=ghcr.io/${{ env.IMAGE_NAME }}/message-service:main \
  #         --set services.routing-service.image=ghcr.io/${{ env.IMAGE_NAME }}/routing-service:main \
  #         --set services.react-client.image=ghcr.io/${{ env.IMAGE_NAME }}/react-client:main \
  #         --set secrets.enabled=false \
  #         --set monitoring.deploymentTracker.enabled=false \
  #         --wait --timeout=10m

  #   - name: Verify deployment
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=gethome-app \
  #         --namespace devops25-k8s-gethome --timeout=300s
        
  #       kubectl get services -n devops25-k8s-gethome
  #       kubectl get pods -n devops25-k8s-gethome

  #   - name: Run integration tests
  #     run: |
  #       export KUBECONFIG=kubeconfig
        
  #       # Run integration tests against staging environment
  #       echo "Running integration tests..."
  #       # Add your integration test commands here
        
  #       echo "Staging deployment completed successfully"

  # Deploy to Production
  deploy-production:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: production
    needs: test-and-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for production cluster
      run: |
        echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Test connectivity with limited permissions
        echo "üîó Testing Kubernetes connectivity..."
        kubectl version --client
        
        # Test namespace access
        echo "üìÅ Testing namespace access..."
        kubectl get namespaces devops25-k8s-gethome --ignore-not-found || echo "Namespace devops25-k8s-gethome does not exist yet (will be created)"
        
        # Test basic API access
        echo "üéØ Testing basic API access..."
        kubectl auth can-i create pods --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited pod permissions"
        kubectl auth can-i create secrets --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited secret permissions"
        
        echo "‚úÖ Kubernetes connection established with available permissions"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Add Helm repositories
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

    - name: Create namespace
      run: |
        export KUBECONFIG=kubeconfig
        kubectl create namespace devops25-k8s-gethome --dry-run=client -o yaml | kubectl apply -f -

    - name: Create GitHub Container Registry secret
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create imagePullSecret for GitHub Container Registry
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --docker-email=${{ github.actor }}@users.noreply.github.com \
          --namespace devops25-k8s-gethome \
          --dry-run=client -o yaml | kubectl apply -f -
        
        echo "‚úÖ GitHub Container Registry secret created successfully"

    - name: Create application secrets
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create secrets with actual credentials from GitHub secrets
        kubectl create secret generic gethome-secrets \
          --from-literal=jwt-secret="${{ secrets.JWT_SECRET }}" \
          --from-literal=mongo-root-password="${{ secrets.MONGO_ROOT_PASSWORD }}" \
          --from-literal=email-username="${{ secrets.EMAIL_USERNAME }}" \
          --from-literal=email-password="${{ secrets.EMAIL_PASSWORD }}" \
          --from-literal=twilio-account-sid="${{ secrets.TWILIO_ACCOUNT_SID }}" \
          --from-literal=twilio-auth-token="${{ secrets.TWILIO_AUTH_TOKEN }}" \
          --from-literal=twilio-phone-number="${{ secrets.TWILIO_PHONE_NUMBER }}" \
          --from-literal=openai-api-key="${{ secrets.OPENAI_API_KEY }}" \
          --from-literal=openroute-api-key="${{ secrets.OPENROUTE_API_KEY }}" \
          --namespace devops25-k8s-gethome \
          --dry-run=client -o yaml | kubectl apply -f -
        
        echo "‚úÖ Application secrets created successfully"

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        
        helm upgrade --install gethome-app ./helm/gethome-app \
          --namespace devops25-k8s-gethome \
          --create-namespace \
          -f ./helm/gethome-app/values.yaml \
          --set global.environment=production \
          --set global.imageRegistry=ghcr.io \
          --set global.imagePullSecrets[0].name=ghcr-secret \
          --set services.auth-service.image=ghcr.io/${{ env.IMAGE_NAME }}/auth-service:latest \
          --set services.usermanagement-service.image=ghcr.io/${{ env.IMAGE_NAME }}/usermanagement-service:latest \
          --set services.ai-service.image=ghcr.io/${{ env.IMAGE_NAME }}/ai-service:latest \
          --set services.message-service.image=ghcr.io/${{ env.IMAGE_NAME }}/message-service:latest \
          --set services.routing-service.image=ghcr.io/${{ env.IMAGE_NAME }}/routing-service:latest \
          --set services.react-client.image=ghcr.io/${{ env.IMAGE_NAME }}/react-client:latest \
          --set services.gethome-metrics-exporter.image=ghcr.io/${{ env.IMAGE_NAME }}/gethome-metrics-exporter:latest \
          --set secrets.enabled=false \
          --set monitoring.deploymentTracker.enabled=false \
          --wait --timeout=30m

    - name: Verify deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=gethome-app \
          --namespace devops25-k8s-gethome --timeout=300s
        
        kubectl get services -n devops25-k8s-gethome
        kubectl get pods -n devops25-k8s-gethome

    - name: Run production tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Run production smoke tests
        echo "Running production tests..."
        # Add your production test commands here
        
        echo "Production deployment completed successfully"

    - name: Notify deployment success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const { data: issues } = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Production Deployment Success - ${new Date().toISOString()}`,
            body: `## Production Deployment Completed Successfully
          
          **Environment**: Production
          **Namespace**: devops25-k8s-gethome
          **Commit**: ${context.sha}
          **Branch**: ${context.ref}
          **Deployed by**: ${context.actor}
          
          ### Services Deployed
          - Auth Service: \`ghcr.io/${{ env.IMAGE_NAME }}/auth-service:latest\`
          - User Management Service: \`ghcr.io/${{ env.IMAGE_NAME }}/usermanagement-service:latest\`
          - AI Service: \`ghcr.io/${{ env.IMAGE_NAME }}/ai-service:latest\`
          - Emergency Service: \`ghcr.io/${{ env.IMAGE_NAME }}/message-service:latest\`
          - Routing Service: \`ghcr.io/${{ env.IMAGE_NAME }}/routing-service:latest\`
          - React Client: \`ghcr.io/${{ env.IMAGE_NAME }}/react-client:latest\`
          
          ### Monitoring
          - Grafana: Available at monitoring endpoint
          - Prometheus: Available at prometheus endpoint
          - AlertManager: Configured for production alerts
          
          ### Next Steps
          1. Monitor application health
          2. Check Grafana dashboards
          3. Verify all services are responding
          4. Run end-to-end tests
          
          Deployed at: ${new Date().toISOString()}`,
            labels: ['deployment', 'production', 'success']
          });

  # Rollback job (manual trigger)
  rollback:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        if [ "${{ github.event.inputs.environment }}" = "production" ]; then
          echo "${{ secrets.PROD_KUBECONFIG }}" | base64 -d > kubeconfig
        elif [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
        else
          echo "${{ secrets.DEV_KUBECONFIG }}" | base64 -d > kubeconfig
        fi
        export KUBECONFIG=kubeconfig
        
        # Test connectivity with limited permissions
        echo "üîó Testing Kubernetes connectivity..."
        kubectl version --client
        
        # Test namespace access
        echo "üìÅ Testing namespace access..."
        kubectl get namespaces devops25-k8s-gethome --ignore-not-found || echo "Namespace devops25-k8s-gethome does not exist yet"
        
        # Test basic API access for rollback operations
        echo "üéØ Testing rollback permissions..."
        kubectl auth can-i get pods --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited pod access"
        kubectl auth can-i list pods --namespace=devops25-k8s-gethome || echo "‚ö†Ô∏è  Limited pod listing"
        
        echo "‚úÖ Kubernetes connection established for ${{ github.event.inputs.environment }} environment"

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'

    - name: Check and rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Check if the release exists first
        echo "Checking if release 'gethome-app' exists in namespace 'devops25-k8s-gethome'..."
        
        if helm list -n devops25-k8s-gethome | grep -q gethome-app; then
          echo "‚úÖ Release 'gethome-app' found"
          
          # Get the history
          echo "Getting release history..."
          HISTORY=$(helm history gethome-app -n devops25-k8s-gethome --output json 2>/dev/null || echo "[]")
          
          if [ "$HISTORY" != "[]" ]; then
            # Get revision count
            REVISION_COUNT=$(echo "$HISTORY" | jq '. | length')
            echo "Found $REVISION_COUNT revision(s)"
            
            if [ "$REVISION_COUNT" -gt 1 ]; then
              # Get the previous revision (second to last)
              PREVIOUS_REVISION=$(echo "$HISTORY" | jq -r '.[-2].revision')
              echo "Previous revision: $PREVIOUS_REVISION"
              
              if [ "$PREVIOUS_REVISION" != "null" ] && [ -n "$PREVIOUS_REVISION" ]; then
                echo "üîÑ Rolling back to revision $PREVIOUS_REVISION"
                helm rollback gethome-app $PREVIOUS_REVISION -n devops25-k8s-gethome --wait --timeout=10m
                echo "‚úÖ Rollback completed successfully"
              else
                echo "‚ùå Unable to determine previous revision"
                exit 1
              fi
            else
              echo "‚ùå Only one revision found - cannot rollback to previous version"
              echo "Current revision is the only available revision"
              exit 1
            fi
          else
            echo "‚ùå No history found for release"
            exit 1
          fi
        else
          echo "‚ùå Release 'gethome-app' not found in namespace 'devops25-k8s-gethome'"
          echo "Available releases in namespace:"
          helm list -n devops25-k8s-gethome
          echo ""
          echo "üí° Troubleshooting:"
          echo "  - Ensure the application has been deployed at least once"
          echo "  - Check if you're using the correct environment"
          echo "  - Verify namespace 'devops25-k8s-gethome' exists"
          echo ""
          echo "Cannot rollback - no deployment found to rollback"
          exit 1
        fi

    - name: Verify rollback
      run: |
        export KUBECONFIG=kubeconfig
        
        # Only verify if we can find the release
        if helm list -n devops25-k8s-gethome | grep -q gethome-app; then
          echo "üîç Verifying rollback status..."
          
          # Check current release status
          helm status gethome-app -n devops25-k8s-gethome
          
          # Wait for pods to be ready (with timeout)
          echo "Waiting for pods to be ready..."
          if kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=gethome-app \
            --namespace devops25-k8s-gethome --timeout=300s; then
            echo "‚úÖ All pods are ready"
          else
            echo "‚ö†Ô∏è  Some pods may still be starting up"
            echo "Current pod status:"
            kubectl get pods -n devops25-k8s-gethome
          fi
          
          # Show current deployment status
          echo ""
          echo "üìä Current deployment status:"
          kubectl get pods -n devops25-k8s-gethome
          echo ""
          kubectl get services -n devops25-k8s-gethome
          echo ""
          echo "‚úÖ Rollback verification completed"
        else
          echo "‚ùå No release found - skipping verification"
          exit 1
        fi

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notify on deployment
  notify:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
    - name: Notify deployment status
      run: |
        echo "Deployment completed successfully!"
        echo "Environment: ${{ github.event.inputs.environment || (github.ref == 'refs/heads/main' && 'production') || 'development' }}"
        echo "Namespace: ${{ github.event.inputs.namespace || 'devops25-k8s-gethome' }}"
        echo "Commit: ${{ github.sha }}"
        
        # Add your notification logic here (Slack, Teams, etc.)
        # Example for Slack:
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"GetHome application deployed successfully!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }} 