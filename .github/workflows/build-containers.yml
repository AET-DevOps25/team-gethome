name: Build and Push Containers

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'server/**'
      - 'client/**'
      - '.github/workflows/build-containers.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'server/**'
      - 'client/**'
  workflow_dispatch:
    inputs:
      service:
        description: 'Specific service to build (leave empty for all)'
        required: false
        type: string
      tag:
        description: 'Tag for the container'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Java Services
  build-java-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [auth-service, usermanagement-service, emergency-service, routing-service]
        include:
          - service: auth-service
            context: ./server/auth-service
            dockerfile: Dockerfile
          - service: usermanagement-service
            context: ./server/usermanagement-service
            dockerfile: Dockerfile
          - service: emergency-service
            context: ./server/emergency-service
            dockerfile: Dockerfile
          - service: routing-service
            context: ./server/routing-service
            dockerfile: Dockerfile
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=GetHome ${{ matrix.service }}
          org.opencontainers.image.description=GetHome ${{ matrix.service }} microservice
          org.opencontainers.image.vendor=GetHome Team

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.context }}/${{ matrix.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Build AI Service (Python)
  build-ai-service:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/ai-service
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=GetHome AI Service
          org.opencontainers.image.description=GetHome AI and Machine Learning Service
          org.opencontainers.image.vendor=GetHome Team

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./server/ai-service
        file: ./server/ai-service/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Build React Client
  build-react-client:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/react-client
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=${{ github.event.inputs.tag || 'latest' }},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=GetHome React Client
          org.opencontainers.image.description=GetHome Frontend React Application
          org.opencontainers.image.vendor=GetHome Team

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./client
        file: ./client/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Generate Container Registry Summary
  generate-summary:
    needs: [build-java-services, build-ai-service, build-react-client]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Generate Container Registry Summary
      uses: actions/github-script@v7
      with:
        script: |
          const { data: packages } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
            package_type: "container",
            org: "${{ github.repository_owner }}",
            package_name: "${{ github.repository_name }}"
          });
          
          const summary = `## Container Registry Summary
          
          ### Built Images
          - **Java Services**: auth-service, usermanagement-service, emergency-service, routing-service
          - **AI Service**: ai-service (Python)
          - **Frontend**: react-client
          
          ### Registry Location
          All images are available at: \`ghcr.io/${{ github.repository }}/\`
          
          ### Image Tags
          - \`latest\`: Latest stable version
          - \`main\`: Main branch builds
          - \`develop\`: Development branch builds
          - \`<commit-sha>\`: Specific commit builds
          
          ### Usage Example
          \`\`\`yaml
          services:
            auth-service:
              image: ghcr.io/${{ github.repository }}/auth-service:latest
          \`\`\`
          
          ### Access
          - **Public**: Images are publicly accessible
          - **Authentication**: Use \`ghcr.io\` as registry
          - **Credentials**: Use GitHub token for private repos
          
          Built at: ${new Date().toISOString()}`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: summary,
          }); 