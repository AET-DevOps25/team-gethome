name: Maintenance Tasks

on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      task:
        description: 'Maintenance task to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - dependencies
        - security
        - cleanup

jobs:
  # Update dependencies
  update-dependencies:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'dependencies' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: client/package-lock.json

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    # Update Java dependencies
    - name: Update Java dependencies
      run: |
        for service in auth-service usermanagement-service emergency-service routing-service; do
          echo "Updating dependencies for $service..."
          cd server/$service
          ./gradlew dependencyUpdates --revision=release
          cd ../..
        done

    # Update Node.js dependencies
    - name: Update Node.js dependencies
      run: |
        cd client
        npm update
        npm audit fix

    # Update Python dependencies
    - name: Update Python dependencies
      run: |
        cd server/ai-service
        pip install --upgrade pip
        pip install --upgrade -r requirements.txt

    # Create PR for dependency updates
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: update dependencies'
        title: 'ü§ñ Automated dependency updates'
        body: |
          This PR contains automated dependency updates.
          
          ## Changes
          - Updated Java dependencies
          - Updated Node.js dependencies  
          - Updated Python dependencies
          
          Please review and merge if tests pass.
        branch: chore/dependency-updates
        delete-branch: true

  # Security audit
  security-audit:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'security' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Run npm audit
      run: |
        cd client
        npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Check for known vulnerabilities
      run: |
        # Check for known CVEs in dependencies
        echo "Checking for known vulnerabilities..."
        # Add specific vulnerability checks here

  # Cleanup old resources
  cleanup:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'cleanup' || github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl (Development)
      if: github.event.inputs.task != 'all'
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig-dev
        export KUBECONFIG=kubeconfig-dev

    - name: Configure kubectl (Production)
      if: github.event.inputs.task != 'all'
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig-prod
        export KUBECONFIG=kubeconfig-prod

    - name: Cleanup old Docker images
      run: |
        # This would clean up old images from registry
        echo "Cleaning up old Docker images..."
        # Add cleanup logic here

    - name: Cleanup old Kubernetes resources
      run: |
        # Clean up completed jobs older than 7 days
        kubectl delete jobs --field-selector=status.successful=1 --all-namespaces --dry-run=client
        
        # Clean up failed pods older than 3 days
        kubectl delete pods --field-selector=status.phase=Failed --all-namespaces --dry-run=client
        
        # Clean up old configmaps and secrets
        echo "Checking for old configmaps and secrets..."

    - name: Cleanup old Helm releases
      run: |
        # List old Helm releases
        helm list --all-namespaces --max=10

  # Health check
  health-check:
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'all' || github.event_name == 'schedule'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl (Development)
      run: |
        echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > kubeconfig-dev
        export KUBECONFIG=kubeconfig-dev

    - name: Check development environment health
      run: |
        echo "Checking development environment..."
        kubectl get pods -n devops25-k8s-gethome
        kubectl get services -n devops25-k8s-gethome
        kubectl get ingress -n devops25-k8s-gethome

    - name: Configure kubectl (Production)
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig-prod
        export KUBECONFIG=kubeconfig-prod

    - name: Check production environment health
      run: |
        echo "Checking production environment..."
        kubectl get pods -n devops25-k8s-gethome
        kubectl get services -n devops25-k8s-gethome
        kubectl get ingress -n devops25-k8s-gethome

    - name: Check resource usage
      run: |
        echo "Checking resource usage..."
        kubectl top pods --all-namespaces --sort-by=cpu
        kubectl top nodes

  # Generate maintenance report
  report:
    needs: [update-dependencies, security-audit, cleanup, health-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Generate maintenance report
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
          });
          
          const summary = checks.check_runs.map(check => 
            `- ${check.name}: ${check.conclusion === 'success' ? '‚úÖ' : '‚ùå'}`
          ).join('\n');
          
          const report = `## Maintenance Report - ${new Date().toISOString().split('T')[0]}
          
          ### Summary
          ${summary}
          
          ### Actions Taken
          - Dependency updates checked
          - Security vulnerabilities scanned
          - Old resources cleaned up
          - Environment health verified
          
          ### Next Steps
          - Review any failed checks
          - Address security vulnerabilities if found
          - Monitor resource usage
          
          Generated by GitHub Actions at ${new Date().toISOString()}`;
          
          // Create an issue with the report
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Maintenance Report - ${new Date().toISOString().split('T')[0]}`,
            body: report,
            labels: ['maintenance', 'automated'],
          }); 