{{- if .Values.monitoring.grafana.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        isDefault: true
        editable: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
data:
  gethome-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GetHome Application Overview",
        "tags": ["gethome", "overview"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Service Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=~\".*-service\"}",
                "legendFormat": "{{job}}"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "HTTP Request Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total[5m])",
                "legendFormat": "{{job}} - {{method}} {{path}}"
              }
            ]
          },
          {
            "id": 3,
            "title": "Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
                "legendFormat": "{{job}} - 95th percentile"
              }
            ]
          },
          {
            "id": 4,
            "title": "Error Rate",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(http_requests_total{status=~\"4..|5..\"}[5m])",
                "legendFormat": "{{job}} - {{status}}"
              }
            ]
          },
          {
            "id": 5,
            "title": "Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "process_resident_memory_bytes / 1024 / 1024",
                "legendFormat": "{{job}} - MB"
              }
            ]
          },
          {
            "id": 6,
            "title": "CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(process_cpu_seconds_total[5m]) * 100",
                "legendFormat": "{{job}} - %"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

  gethome-services.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GetHome Services Detail",
        "tags": ["gethome", "services"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Auth Service Metrics",
            "type": "row"
          },
          {
            "id": 2,
            "title": "Auth Service - Login Attempts",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(auth_login_attempts_total[5m])",
                "legendFormat": "Login attempts/sec"
              }
            ]
          },
          {
            "id": 3,
            "title": "User Management Service Metrics",
            "type": "row"
          },
          {
            "id": 4,
            "title": "User Management - Profile Updates",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(user_profile_updates_total[5m])",
                "legendFormat": "Profile updates/sec"
              }
            ]
          },
          {
            "id": 5,
            "title": "AI Service Metrics",
            "type": "row"
          },
          {
            "id": 6,
            "title": "AI Service - Request Processing",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(ai_requests_total[5m])",
                "legendFormat": "AI requests/sec"
              }
            ]
          },
          {
            "id": 7,
            "title": "Emergency Service Metrics",
            "type": "row"
          },
          {
            "id": 8,
            "title": "Emergency Service - Alerts",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(emergency_alerts_total[5m])",
                "legendFormat": "Emergency alerts/sec"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

  gethome-infrastructure.json: |
    {
      "dashboard": {
        "id": null,
        "title": "GetHome Infrastructure",
        "tags": ["gethome", "infrastructure"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Kubernetes Pod Status",
            "type": "stat",
            "targets": [
              {
                "expr": "kube_pod_status_phase",
                "legendFormat": "{{pod}} - {{phase}}"
              }
            ]
          },
          {
            "id": 2,
            "title": "Node CPU Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "100 - (avg by (instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)",
                "legendFormat": "{{instance}}"
              }
            ]
          },
          {
            "id": 3,
            "title": "Node Memory Usage",
            "type": "graph",
            "targets": [
              {
                "expr": "(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100",
                "legendFormat": "{{instance}}"
              }
            ]
          },
          {
            "id": 4,
            "title": "MongoDB Connections",
            "type": "graph",
            "targets": [
              {
                "expr": "mongodb_connections",
                "legendFormat": "MongoDB connections"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "30s"
      }
    }

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  accessModes:
    - ReadWriteOnce
  {{- if .Values.monitoring.grafana.storage.storageClass }}
  storageClassName: {{ .Values.monitoring.grafana.storage.storageClass }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.monitoring.grafana.storage.size }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.serviceAccount.name | default "gethome-service-account" }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: grafana
          image: {{ .Values.monitoring.grafana.image }}
          imagePullPolicy: {{ .Values.monitoring.grafana.imagePullPolicy }}
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: {{ .Values.monitoring.grafana.adminPassword | quote }}
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.monitoring.grafana.adminUser | quote }}
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel"
            - name: GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH
              value: "/etc/grafana/provisioning/dashboards/gethome-overview.json"
          ports:
            - containerPort: 3000
              name: http
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.monitoring.grafana.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 5
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: grafana
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  type: ClusterIP
  selector:
    app: grafana
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
{{- end }} 