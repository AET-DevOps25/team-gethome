apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: gethome-business-alerts
  namespace: {{ .Values.namespace }}
  labels:
    app: gethome
    component: business-monitoring
    prometheus: kube-prometheus
    role: alert-rules
spec:
  groups:
  
  # ===== SAFETY & SECURITY CRITICAL ALERTS =====
  - name: gethome.safety.critical
    interval: 30s
    rules:
    
    - alert: GetHomeSafetyScoreCriticalDrop
      expr: |
        (
          gethome_safety_score_average < 0.6
        ) and (
          gethome_safety_score_average offset 1h > 0.7
        )
      for: 5m
      labels:
        severity: critical
        category: safety
        business_impact: high
        team: safety-engineering
      annotations:
        summary: "üö® CRITICAL: GetHome Safety Score Dropped Dangerously Low"
        description: |
          The average safety score for GetHome routes has dropped to {{ $value | humanizePercentage }}, 
          down from {{ with query "gethome_safety_score_average offset 1h" }}{{ . | first | value | humanizePercentage }}{{ end }} an hour ago.
          
          **Business Impact**: Users are being routed through potentially unsafe areas
          **User Safety Risk**: HIGH - Immediate intervention required
          
          **Immediate Actions Required**:
          1. Investigate danger zone detection algorithms
          2. Review recent route calculations
          3. Check OpenRoute Service integration
          4. Validate safety scoring logic
          
          **Dashboard**: https://grafana.gethome.local/d/gethome-business-intelligence
        runbook_url: "https://wiki.gethome.local/runbooks/safety-score-critical"
        slack_channel: "#safety-critical"
        escalation_policy: "safety-team-immediate"
    
    - alert: GetHomeEmergencyResponseDegraded
      expr: |
        gethome_emergency_response_efficiency_score < 0.7
      for: 3m
      labels:
        severity: critical
        category: emergency
        business_impact: critical
        team: emergency-response
      annotations:
        summary: "üö® Emergency Response System Degraded"
        description: |
          Emergency response efficiency has dropped to {{ $value | humanizePercentage }}.
          This means emergency situations are taking longer to resolve.
          
          **Life Safety Impact**: CRITICAL
          **Current Active Emergencies**: {{ with query "gethome_active_emergencies_count" }}{{ . | first | value }}{{ end }}
          
          **Immediate Response Required**:
          1. Check emergency notification delivery systems
          2. Verify emergency contact reachability
          3. Investigate notification service performance
          4. Escalate to emergency services if needed
        runbook_url: "https://wiki.gethome.local/runbooks/emergency-response-degraded"
        slack_channel: "#emergency-critical"
        escalation_policy: "emergency-team-immediate"
    
    - alert: GetHomeFalseAlarmRateSpike
      expr: |
        gethome_false_alarm_rate_percentage > 25
      for: 10m
      labels:
        severity: warning
        category: safety
        business_impact: medium
        team: safety-engineering
      annotations:
        summary: "‚ö†Ô∏è High False Alarm Rate Detected"
        description: |
          False alarm rate has increased to {{ $value }}%, which may erode user trust
          in the emergency system.
          
          **Business Risk**: Loss of user confidence in emergency features
          **Threshold Exceeded**: 25% false alarm rate
          
          **Investigation Steps**:
          1. Review recent emergency alert patterns
          2. Analyze user feedback and reports
          3. Check emergency detection algorithms
          4. Consider improving alert validation
        runbook_url: "https://wiki.gethome.local/runbooks/false-alarm-investigation"
        slack_channel: "#safety-alerts"
  
  # ===== USER BEHAVIOR & ENGAGEMENT ALERTS =====
  - name: gethome.user.behavior
    interval: 60s
    rules:
    
    - alert: GetHomeUserEngagementDrop
      expr: |
        (
          gethome_user_engagement_score < 0.5
        ) and (
          gethome_user_engagement_score offset 2h > 0.7
        )
      for: 15m
      labels:
        severity: warning
        category: user_experience
        business_impact: high
        team: product
      annotations:
        summary: "üìâ Significant User Engagement Drop"
        description: |
          User engagement score dropped from {{ with query "gethome_user_engagement_score offset 2h" }}{{ . | first | value | humanizePercentage }}{{ end }} 
          to {{ $value | humanizePercentage }} in the last 2 hours.
          
          **Business Impact**: Potential user churn and reduced platform value
          **Engagement Metrics**:
          - Routes per user: {{ with query "gethome_route_planning_frequency_per_user_per_day" }}{{ . | first | value | printf "%.2f" }}{{ end }}/day
          - Safety conscious users: {{ with query "gethome_safety_conscious_users_percentage" }}{{ . | first | value | printf "%.1f" }}{{ end }}%
          
          **Investigation Areas**:
          1. Recent app updates or feature changes
          2. Service performance issues
          3. User onboarding flow problems
          4. Safety feature adoption barriers
        runbook_url: "https://wiki.gethome.local/runbooks/user-engagement-drop"
        slack_channel: "#product-alerts"
    
    - alert: GetHomeSafetyFeatureAdoptionLow
      expr: |
        gethome_safety_conscious_users_percentage < 50
      for: 30m
      labels:
        severity: warning
        category: product
        business_impact: medium
        team: product
      annotations:
        summary: "‚ö†Ô∏è Low Safety Feature Adoption"
        description: |
          Only {{ $value }}% of users are regularly using safety features, below our 50% target.
          
          **Business Impact**: Reduced safety value proposition
          **Feature Adoption Rates**:
          {{- range query "gethome_feature_adoption_rate_percentage" }}
          - {{ .Labels.feature }}: {{ .Value | printf "%.1f" }}%
          {{- end }}
          
          **Improvement Actions**:
          1. Review onboarding flow for safety features
          2. A/B test safety feature messaging
          3. Analyze user feedback on safety features
          4. Consider gamification or incentives
        runbook_url: "https://wiki.gethome.local/runbooks/feature-adoption-improvement"
        slack_channel: "#product-strategy"
    
    - alert: GetHomeUserRetentionDeclining
      expr: |
        rate(gethome_user_retention_rate_percentage{period="30d"}[24h]) < -5
      for: 2h
      labels:
        severity: warning
        category: business
        business_impact: high
        team: growth
      annotations:
        summary: "üìä User Retention Rate Declining"
        description: |
          30-day user retention rate is declining at {{ $value }}% per day.
          Current retention: {{ with query "gethome_user_retention_rate_percentage{period=\"30d\"}" }}{{ . | first | value | printf "%.1f" }}{{ end }}%
          
          **Business Impact**: Potential revenue loss and reduced user base
          **Growth Metrics to Review**:
          - New user onboarding completion rates
          - Feature discovery and adoption
          - User satisfaction scores
          - Churn reasons and feedback
        runbook_url: "https://wiki.gethome.local/runbooks/retention-decline"
        slack_channel: "#growth-team"
  
  # ===== BUSINESS INTELLIGENCE ALERTS =====
  - name: gethome.business.intelligence
    interval: 120s
    rules:
    
    - alert: GetHomeCommunityImpactDeclining
      expr: |
        gethome_community_safety_contribution_score < 0.6
      for: 20m
      labels:
        severity: warning
        category: business
        business_impact: medium
        team: safety-engineering
      annotations:
        summary: "üìà Community Safety Impact Below Target"
        description: |
          Community safety contribution score is {{ $value | humanizePercentage }}, below our 60% target.
          
          **Business Impact**: Reduced value proposition and community benefit
          **Safety Metrics**:
          - Incidents prevented: {{ with query "gethome_estimated_incidents_prevented_total" }}{{ . | first | value | printf "%.0f" }}{{ end }}
          - Distance optimized: {{ with query "gethome_total_distance_saved_kilometers" }}{{ . | first | value | printf "%.0f" }}{{ end }} km
          - Active danger zones: {{ with query "gethome_active_danger_zones_count" }}{{ . | first | value }}{{ end }}
          
          **Improvement Areas**:
          1. Enhance route optimization algorithms
          2. Improve danger zone detection accuracy
          3. Increase user adoption of safety features
          4. Review community reporting mechanisms
        runbook_url: "https://wiki.gethome.local/runbooks/community-impact"
        slack_channel: "#business-intelligence"
    
    - alert: GetHomeRouteOptimizationIneffective
      expr: |
        gethome_route_optimization_effectiveness_percentage < 70
      for: 15m
      labels:
        severity: warning
        category: performance
        business_impact: medium
        team: routing-engineering
      annotations:
        summary: "üó∫Ô∏è Route Optimization Below Performance Target"
        description: |
          Route optimization effectiveness is {{ $value }}%, below our 70% target.
          
          **Performance Impact**: Users not receiving optimal safe routes
          **Current Metrics**:
          - Average safety score: {{ with query "gethome_safety_score_average" }}{{ . | first | value | humanizePercentage }}{{ end }}
          - Danger zones avoided: {{ with query "rate(gethome_danger_zones_avoided_total[1h])" }}{{ . | first | value | printf "%.1f" }}{{ end }}/hour
          - Route calculation time: {{ with query "histogram_quantile(0.95, gethome_route_calculation_duration_seconds_bucket)" }}{{ . | first | value | humanizeDuration }}{{ end }} (95th percentile)
          
          **Investigation Steps**:
          1. Check OpenRoute Service API performance
          2. Review danger zone polygon generation
          3. Analyze route calculation algorithms
          4. Validate safety scoring logic
        runbook_url: "https://wiki.gethome.local/runbooks/route-optimization"
        slack_channel: "#routing-alerts"
  
  # ===== PREDICTIVE & OPERATIONAL ALERTS =====
  - name: gethome.predictive.operations
    interval: 300s
    rules:
    
    - alert: GetHomePeakUsagePredicted
      expr: |
        gethome_peak_usage_prediction_factor > 2.0
      for: 5m
      labels:
        severity: info
        category: operations
        business_impact: low
        team: infrastructure
      annotations:
        summary: "üìà High Usage Peak Predicted"
        description: |
          Peak usage factor of {{ $value | printf "%.1f" }}x normal load is predicted for the next hour.
          
          **Operational Impact**: Potential system strain during peak
          **Resource Forecasts**:
          {{- range query "gethome_resource_utilization_forecast_percentage" }}
          - {{ .Labels.resource_type }}: {{ .Value | printf "%.1f" }}%
          {{- end }}
          
          **Preparation Actions**:
          1. Scale up critical services preemptively
          2. Monitor system performance closely
          3. Ensure emergency response capacity
          4. Prepare for potential alert volume increase
        runbook_url: "https://wiki.gethome.local/runbooks/peak-usage-preparation"
        slack_channel: "#operations"
    
    - alert: GetHomeCostEfficiencyDeclining
      expr: |
        gethome_cost_efficiency_score < 0.6
      for: 1h
      labels:
        severity: info
        category: business
        business_impact: low
        team: finops
      annotations:
        summary: "üí∞ Cost Efficiency Below Target"
        description: |
          Cost efficiency score is {{ $value | humanizePercentage }}, below our 60% target.
          
          **Business Impact**: Higher operational costs reducing profitability
          **Optimization Opportunities**:
          1. Review resource utilization and scaling policies
          2. Optimize expensive API calls (OpenRoute, maps)
          3. Analyze storage and compute efficiency
          4. Consider reserved capacity for predictable workloads
          
          **Monthly Cost Trends**: Monitor for sustained inefficiency
        runbook_url: "https://wiki.gethome.local/runbooks/cost-optimization"
        slack_channel: "#finops"
  
  # ===== DATA QUALITY & FRESHNESS ALERTS =====
  - name: gethome.data.quality
    interval: 180s
    rules:
    
    - alert: GetHomeDangerZoneDataStale
      expr: |
        gethome_data_freshness_minutes{data_type="danger_zones"} > 15
      for: 10m
      labels:
        severity: warning
        category: data_quality
        business_impact: medium
        team: safety-engineering
      annotations:
        summary: "‚è∞ Danger Zone Data Becoming Stale"
        description: |
          Danger zone data is {{ $value | humanizeDuration }} old, exceeding our 15-minute freshness target.
          
          **Safety Impact**: Users may not be warned about recent dangers
          **Data Freshness Status**:
          {{- range query "gethome_data_freshness_minutes" }}
          - {{ .Labels.data_type }}: {{ .Value | humanizeDuration }}
          {{- end }}
          
          **Investigation Steps**:
          1. Check danger zone reporting service
          2. Verify database synchronization
          3. Review data pipeline health
          4. Validate real-time update mechanisms
        runbook_url: "https://wiki.gethome.local/runbooks/data-freshness"
        slack_channel: "#data-quality"
    
    - alert: GetHomeLocationDataOutdated
      expr: |
        gethome_data_freshness_minutes{data_type="user_locations"} > 5
      for: 5m
      labels:
        severity: critical
        category: data_quality
        business_impact: high
        team: location-services
      annotations:
        summary: "üìç User Location Data Critically Outdated"
        description: |
          User location data is {{ $value | humanizeDuration }} old, which severely impacts 
          emergency response and route safety.
          
          **Emergency Impact**: CRITICAL - Emergency services may not reach users
          **Route Impact**: Users receiving routes based on outdated location data
          
          **Immediate Actions**:
          1. Check location service health
          2. Verify GPS/location permissions
          3. Investigate mobile app location tracking
          4. Review location data pipeline
        runbook_url: "https://wiki.gethome.local/runbooks/location-data-critical"
        slack_channel: "#emergency-critical"
        escalation_policy: "location-team-immediate"

  # ===== CROSS-SERVICE HEALTH ALERTS =====
  - name: gethome.service.health
    interval: 60s
    rules:
    
    - alert: GetHomeServiceDegradationPattern
      expr: |
        (
          avg(gethome_api_success_rate_percentage) < 95
        ) and (
          count(gethome_api_success_rate_percentage < 90) >= 2
        )
      for: 10m
      labels:
        severity: warning
        category: system_health
        business_impact: high
        team: platform
      annotations:
        summary: "üîß Multi-Service Performance Degradation"
        description: |
          Multiple GetHome services are experiencing performance issues.
          Average API success rate: {{ with query "avg(gethome_api_success_rate_percentage)" }}{{ . | first | value | printf "%.1f" }}{{ end }}%
          
          **Affected Services**:
          {{- range query "gethome_api_success_rate_percentage < 90" }}
          - {{ .Labels.service }}: {{ .Value | printf "%.1f" }}%
          {{- end }}
          
          **Business Impact**: 
          - Reduced user experience
          - Potential safety feature failures
          - Emergency response delays
          
          **System-wide Investigation Required**:
          1. Check shared infrastructure (databases, networks)
          2. Review recent deployments across services
          3. Investigate resource constraints
          4. Monitor cascade failure patterns
        runbook_url: "https://wiki.gethome.local/runbooks/multi-service-degradation"
        slack_channel: "#platform-alerts" 