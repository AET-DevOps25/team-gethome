{{- if .Values.monitoring.prometheus.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - /etc/prometheus/rules/gethome-alerts.yml

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Auth Service
      - job_name: 'auth-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['auth-service:8080']
        scrape_interval: 10s

      # User Management Service
      - job_name: 'usermanagement-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['usermanagement-service:8080']
        scrape_interval: 10s

      # Message Service
      - job_name: 'message-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['message-service:8080']
        scrape_interval: 10s

      # Routing Service
      - job_name: 'routing-service'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['routing-service:8080']
        scrape_interval: 10s

      # AI Service
      - job_name: 'ai-service'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['ai-service:8000']
        scrape_interval: 10s

      # React Client (if it exposes metrics)
      - job_name: 'react-client'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['react-client:80']
        scrape_interval: 30s

      # GetHome Custom Business Intelligence Exporter
      - job_name: 'gethome-metrics-exporter'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['gethome-metrics-exporter:8090']
        scrape_interval: {{ .Values.monitoring.customExporter.scrapeInterval | default "30s" }}
        honor_labels: true

      # MongoDB
      - job_name: 'mongodb'
        static_configs:
          - targets: ['mongo:27017']
        scrape_interval: 30s

      # Kubernetes API
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          insecure_skip_verify: true
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      # Kubernetes pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.monitoring.prometheus.storage }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    spec:
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.serviceAccount.name | default "gethome-service-account" }}
      {{- end }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: prometheus
          image: {{ .Values.monitoring.prometheus.image }}
          imagePullPolicy: {{ .Values.monitoring.prometheus.imagePullPolicy }}
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time={{ .Values.monitoring.prometheus.retention }}'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
          ports:
            - containerPort: 9090
              name: http
          {{- with .Values.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.monitoring.prometheus.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
            - name: prometheus-rules
              mountPath: /etc/prometheus/rules
            - name: prometheus-storage
              mountPath: /prometheus
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: {{ .Values.global.namespace | default "devops25-k8s-gethome" }}
  labels:
    app: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
spec:
  type: ClusterIP
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http
{{- end }} 